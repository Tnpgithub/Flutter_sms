import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.greenA700,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(14.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray40002,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray700,
          fontSize: 14.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray700,
          fontSize: 12.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 28.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.greenA700,
          fontSize: 12.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w600,
        ),
        labelSmall: TextStyle(
          color: appTheme.gray700,
          fontSize: 9.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF7E7CF0),
    primaryContainer: Color(0XFF002987),
    secondary: Color(0XFF002987),
    secondaryContainer: Color(0XFF6E95A0),
    tertiary: Color(0XFF002987),
    tertiaryContainer: Color(0XFF6E95A0),

    // Background colors
    background: Color(0XFF002987),

    // Surface colors
    surface: Color(0XFF002987),
    surfaceTint: Color(0XFF181A22),
    surfaceVariant: Color(0XFF6E95A0),

    // Error colors
    error: Color(0XFF181A22),
    errorContainer: Color(0XFFF94144),
    onError: Color(0XFFF8961E),
    onErrorContainer: Color(0XFF181A22),

    // On colors(text colors)
    onBackground: Color(0XFFDADADA),
    onInverseSurface: Color(0XFFF8961E),
    onPrimary: Color(0XFF181A22),
    onPrimaryContainer: Color(0XFFDADADA),
    onSecondary: Color(0XFFDADADA),
    onSecondaryContainer: Color(0XFF181A22),
    onTertiary: Color(0XFFDADADA),
    onTertiaryContainer: Color(0XFF181A22),

    // Other colors
    outline: Color(0XFF181A22),
    outlineVariant: Color(0XFF002987),
    scrim: Color(0XFF002987),
    shadow: Color(0XFF181A22),

    // Inverse colors
    inversePrimary: Color(0XFF002987),
    inverseSurface: Color(0XFF181A22),

    // Pending colors
    onSurface: Color(0XFFDADADA),
    onSurfaceVariant: Color(0XFF181A22),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => Color(0XFFF9C74F);
  Color get amber700 => Color(0XFFE1A200);

  // Black
  Color get black900 => Color(0XFF000000);
  Color get homeSellOne => Color(0xFFECF5FF);
  Color get homeSellTwo => Color(0xFFF2EAF5);
  Color get homeSellThree => Color(0xFFE6F4F4);
  Color get homeSellFour => Color(0xFFE3E8F4);
    Color get homeSellFive => Color(0xFFF5F5DC);
    Color get homeSellSix => Color(0xFFF7EDF0);
    Color get homeSellSeven => Color(0xFFF9EDF6);
    Color get notice => Color(0xFFDFF4E4);

  // Blue
  Color get blue50 => Color(0XFFE6F4FF);
  Color get blue600 => Color(0XFF2C80EA);
  Color get blue60001 => Color(0XFF2D9CDB);
  Color get blue800 => Color(0XFF226FA7);

  // BlueGray
  Color get blueGray100 => Color(0XFFD6D6D6);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray300 => Color(0XFF8F9BB3);
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray800 => Color(0XFF24446D);
  Color get blueGray900 => Color(0XFF302D2D);
  Color get blueGray90001 => Color(0XFF222B45);
  Color get blueGray90002 => Color(0XFF263238);
  Color get blueGray90003 => Color(0XFF292D32);

  // DeepOrange
  Color get deepOrange50 => Color(0XFFFFE8E8);
  Color get deepOrangeA200 => Color(0XFFF3722C);

  // DeepPurple
  Color get deepPurple50 => Color(0XFFEDECFF);

  // Gray
  Color get gray100 => Color(0XFFF6F6F6);
  Color get gray10001 => Color(0XFFEFF3FF);
  Color get gray10002 => Color(0XFFF3F3F3);
  Color get gray10003 => Color(0XFFF3F1FF);
  Color get gray400 => Color(0XFFDBB8BA);
  Color get gray40001 => Color(0XFFC4C4C4);
  Color get gray40002 => Color(0XFFBDBDBD);
  Color get gray50 => Color(0XFFF6F2FF);
  Color get gray5001 => Color(0XFFF7F7FE);
  Color get gray5002 => Color(0XFFF8F8F8);
  Color get gray600 => Color(0XFF808080);
  Color get gray60001 => Color(0XFF797979);
  Color get gray700 => Color(0XFF696969);
  Color get gray800 => Color(0XFF4F4F4F);
  Color get gray80001 => Color(0XFF483737);

  // Green
  Color get greenA700 => Color(0XFF04B155);

  // Indigo
  Color get indigo100 => Color(0XFFBBB5E4);
  Color get indigo300 => Color(0XFF7E7CEF);
  Color get indigo400 => Color(0XFF5C59DB);
  Color get indigo600 => Color(0XFF2A6A90);

  // LightBlue
  Color get lightBlue900 => Color(0XFF0E598E);

  // LightGreen
  Color get lightGreen400 => Color(0XFF90BE6D);

  // Pink
  Color get pink50 => Color(0XFFFFE3E6);
  Color get pink900 => Color(0XFF6A2831);

  // Purple
  Color get purple600 => Color(0XFF8B24B0);

  // Red
  Color get red100 => Color(0XFFF6CCCF);
  Color get red400 => Color(0XFFDE5656);
  Color get red500 => Color(0XFFF14336);
  Color get red700 => Color(0XFFCC3B3B);
  Color get red70001 => Color(0XFFD83636);

  // Teal
  Color get teal600 => Color(0XFF209E69);
  Color get grey => Color(0xFFC4C4C4);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
